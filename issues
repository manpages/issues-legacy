#!/bin/bash
# PID of the root process
export ISSUES_TOP_PID=$$

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Include
#issues_readlink-f() { # Mac OS X readlink -f hack
  #file=$1
  #_max_jumps=1000
  #cd $(dirname $file)
  #file=$(basename $file)
  #jmp_count=0
  #while [ -L "$file" ] && $jmp_count < $_max_jumps; do
    #file="$(readlink "$file")"
    #cd "$(dirname "$file")"
    #file="$(basename "$file")"
  #done
  #full_path="$(pwd -P)"
  #echo "$full_path/$file"
#}
#lnk="$(issues_readlink-f "$0")"
#abs="$(dirname $lnk)"
[ -d $DIR/include/ ] && include_dir=$DIR/include || include_dir=/var/lib/issues
for lib in $include_dir/*; do
  eval "$(cat $lib)"
done

# Required for control flow
[ -z $ISSUES_DEBUG_LEVEL ] && export ISSUES_DEBUG_LEVEL=5
[ -z $1 ] && err "Not enough arguments.\n$(issues_usage)" || verb=$1
shift
debug "Verb: $verb"

# Initialization is a top priority action
[ $verb == "init" ] && issues_init && ok

# Settings
issues_get_config
[ -z $ISSUES_DEBUG_LEVEL ] && issues_set_debug_level $issues_debug_level

# Dispatch
issues_verbs=('pull' 'add' 'add-named' 'a' 'an' 'cat' 'tree' 'comment' 'sub' 'sub-named' 's' 'sn' 'list' 'ls')
issues_verbs=( ${issues_verbs[@]} ${issues_statuses[@]} )
for i in ${issues_verbs[@]}; do
  [ $verb == $i ] && issues_$i $* && ok
done
err "$(issues_usage)"
